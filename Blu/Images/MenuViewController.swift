//
//  MenuViewController.swift
//  Blu
//
//  Created by Aranza Manriquez Alonso on 25/12/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class MenuViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: MenuPresenterInterface!
    @IBOutlet weak var dogImage: UIImageView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    // MARK: - Lifecycle -

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.setNavigationBarHidden(true, animated: false)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        showActivity(show: true)
        presenter.performGetImage()
    }
    
   
    
    func showActivity(show: Bool) {
        if show {
            activityIndicator.startAnimating()
            view.isUserInteractionEnabled = false
            activityIndicator.isHidden = false
        } else {
            activityIndicator.stopAnimating()
            activityIndicator.hidesWhenStopped = true
            activityIndicator.isHidden = true
            view.isUserInteractionEnabled = true
        }
    }
    
    @IBAction func changeImage(_ sender: Any) {
        showActivity(show: true)
        presenter.performGetImage()
    }
    
    @IBAction func logOut(_ sender: Any) {
        UserDefaults.standard.set("false", forKey: ATConstants.isLogged)
        SceneDelegate.navigationController?.pushViewController(LoginWireframe().viewController, animated: true)
    }
    
}

// MARK: - Extensions -

extension MenuViewController: MenuViewInterface {
    func successGetImage(response: DogImageResponse) {
        showActivity(show: false)
        dogImage.downloaded(from: response.message)
    }
    
    func failureGetImage(messageError: String) {
        showActivity(show: false)
        showToast(message: messageError, font: .systemFont(ofSize: 12.0))
        print("Image error")
    }
    
}

extension UIImageView {
    func downloaded(from url: URL, contentMode mode: ContentMode = .scaleAspectFit) {
        contentMode = mode
        URLSession.shared.dataTask(with: url) { data, response, error in
            guard
                let httpURLResponse = response as? HTTPURLResponse, httpURLResponse.statusCode == 200,
                let mimeType = response?.mimeType, mimeType.hasPrefix("image"),
                let data = data, error == nil,
                let image = UIImage(data: data)
                else { return }
            DispatchQueue.main.async() { [weak self] in
                self?.image = image
            }
        }.resume()
    }
    func downloaded(from link: String, contentMode mode: ContentMode = .scaleAspectFit) {
        guard let url = URL(string: link) else { return }
        downloaded(from: url, contentMode: mode)
    }
}
